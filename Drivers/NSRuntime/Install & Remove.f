/*	File:		Install & Remove.f	Project:	Einstein NS Runtime*///OpenResFile("package.rsrc");//DefConst('kBugTrapPackage, GetResource("pkg ", 1000, 'package));//DefConst('kHandlerPackage, GetResource("pkg ", 1002, 'package));//CloseResFile();knownGlobalFunctions.|Einstein:Quit| := 0;installScript := func( partFrame, removeFrame )begin	call kSetDisplayParamsFn with ();	DefGlobalFn('|Einstein:EvaluateNS|, kEvaluateNSFn);	DefGlobalFn('|Einstein:InstallPackage|, kInstallPackageFn);	DefGlobalFn('Write, kMyWrite);	DefGlobalFn('Print, kMyPrint);	Call NSRuntime.InstallHandler with ();//	AddDeferredCall(func()//		begin//			GetDefaultStore():SuckPackageFromBinary(kBugTrapPackage, nil);//		end, nil);	// Register the keyboard.	PostCommandParam(GetRoot(), 33, 1);		// Install NIE bindings.	call kInstallNIEBindings with ();		// Install native global functions.	call kInstallNativeFns with ();		// Patch the Extras drawer.	GetRoot().extrasdrawer._proto := {		viewSetupFormScript: func()			begin				inherited:?viewSetupFormScript();				local theAboutBtn := self.status.OrigMenuLeftButtons[0];				local theAboutItems := Clone(theAboutBtn.stdItems);/*				AddArraySlot(theAboutItems,					{						item: "Install Package",						msg: 'EinsteinInstallPackage					}); */				AddArraySlot(theAboutItems,					{						item: "Quit Einstein",						msg: 'EinsteinQuit					});				status.OrigMenuLeftButtons := Clone(status.OrigMenuLeftButtons);				local theNewBtn :=				{					_proto: theAboutBtn,					stdItems: theAboutItems,					EinsteinQuit: func() |Einstein:Quit|(),//					EinsteinInstallPackage: func() |Einstein:InstallPackage|()				};				status.OrigMenuLeftButtons[0] := theNewBtn;			end,		_proto: GetRoot().extrasdrawer._proto	};		// Patch setup application.	GetRoot().setup._proto := {		viewSetupDoneScript: func()			begin				inherited:?viewSetupDoneScript();				if not StrFilled(fPersona.name.first) and not StrFilled(fPersona.name.last) then				fPersona := call kGetUserInfoFn with ();				// Find a location with the current GMT.				SetUserConfig('location, call kGetLocationWithProperGMTFn with (					fPersona.country,					fPersona.region,					fPersona.city					));			end,		_proto: GetRoot().setup._proto	};end;removeScript := func( removeFrame )begin	// We're never removed.end;