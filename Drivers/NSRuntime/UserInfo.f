/*	File: UserInfo.f*/DefConst('kCountryISOCodes,	{/*		'Algeria,		'Cambodia,		'ElSalvador,		'Kazakhstan,		'Latvia,		'Myanmar,		'SriLanka,		'Sudan,		'Tahiti,		'Tanzania,*/	ae:	'UAE,	af:	'Afghanistan,	al:	'Albania,	am:	'Armenia,	ao:	'Angola,	ar:	'Argentina,	at:	'Austria,	au:	'Australia,	az:	'Azerbaijan,	bb:	'Barbados,	bd:	'Bangladesh,	be:	'Belgium,	bf:	'BurkinaFaso,	bg:	'Bulgaria,	bh:	'Bahrain,	bi:	'Burundi,	bo:	'Bolivia,	br:	'Brazil,	bs:	'Bahamas,	|by|:	'Belarus,	bz:	'Belize,	ca:	'Canada,	cd:	'Zaire,	cg:	'Congo,	ch:	'Switzerland,	ci:	'IvoryCoast,	cl:	'Chile,	cm:	'Cameroon,	cn:	'China,	co:	'Colombia,	cr:	'CostaRica,	cu:	'Cuba,	cy:	'Cyprus,	cz:	'Czech,	de:	'Germany,	dk:	'Denmark,	|do|:	'DomRep,	ec:	'Ecuador,	ee:	'Estonia,	eg:	'Egypt,	es:	'Spain,	et:	'Ethiopia,	fi:	'Finland,	fj:	'Fiji,	fr:	'France,	ga:	'Gabon,	ge:	'Georgia,	gh:	'Ghana,	gl:	'Greenland,	gm:	'Gambia,	gr:	'Greece,	gt:	'Guatemala,	gu:	'Guam,	gw:	'Guinea,	gy:	'Guyana,	hk:	'HongKong,	hn:	'Honduras,	ht:	'Haiti,	hu:	'Hungary,	id:	'Indonesia,	ie:	'Ireland,	il:	'Israel,	|in|:	'India,	iq:	'Iraq,	ir:	'Iran,	is:	'Iceland,	it:	'Italy,	ja:	'Japan,	jm:	'Jamaica,	jo:	'Jordan,	ke:	'Kenya,	kg:	'Kyrgyzstan,	kp:	'NorthKorea,	kr:	'Korea,	kw:	'Kuwait,	la:	'Laos,	lb:	'Lebanon,	li:	'Liechtenstein,	lr:	'Liberia,	ls:	'Lesotho,	lt:	'Lithuania,	lu:	'Luxembourg,	ly:	'Libya,	ma:	'Morocco,	mc:	'Monaco,	md:	'Moldava,	mg:	'Madagascar,	ml:	'Mali,	mo:	'Macau,	mr:	'Mauritania,	mt:	'Malta,	mw:	'Malawi,	mx:	'Mexico,	my:	'Malaysia,	nc:	'NewCaledonia,	ne:	'Niger,	ng:	'Nigeria,	ni:	'Nicaragua,	nl:	'Netherlands,	no:	'Norway,	np:	'Nepal,	nz:	'NewZealand,	om:	'Oman,	pa:	'Panama,	pe:	'Peru,	pg:	'Papua,	ph:	'Philippines,	pk:	'Pakistan,	pl:	'Poland,	pt:	'Portugal,	py:	'Paraguay,	qa:	'Qatar,	ro:	'Romania,	ru:	'Russia,	rw:	'Rwanda,	sa:	'SaudiArabia,	se:	'Sweden,	sg:	'Singapore,	si:	'Slovenia,	sk:	'Slovakia,	sl:	'SierraLeone,	sn:	'Senegal,	so:	'Somalia,	sr:	'Suriname,	sy:	'Syria,	td:	'Chad,	tg:	'Togo,	th:	'Thailand,	tj:	'Tajikistan,	tm:	'Turkmenistan,	tn:	'Tunisia,	tr:	'Turkey,	tw:	'Taiwan,	ua:	'Ukraine,	ug:	'Uganda,	uk:	'UK,	us:	'USA,	uy:	'Uruguay,	uz:	'Uzbekistan,	ve:	'Venezuela,	vn:	'Vietnam,	za:	'SouthAfrica,	zm:	'Zambia,	zw:	'Zimbabwe,	});DefConst('kGetUserInfoFn, func()begin	local info := call NSRuntime.GetUserInfo with ();	if (info.countryISOCode) then	begin		local countrySym := kCountryISOCodes.(info.countryISOCode);		if (countrySym) then		begin			// Update the country name from the soup.			local theStore := GetPackageStore("WorldData");			if (theStore) then			begin				local theSoup := theStore:GetSoup("Countries");				if (theSoup) then				begin					local theEntry :=						theSoup:Query({							indexPath: 'symbol,							beginKey: countrySym,							endKey: countrySym}):entry();					if (theEntry) then						info.country := theEntry.name;				end;			end;		end;		RemoveSlot(info, 'countryISOCode);	end;	return info;end);DefConst('kGetLocationWithProperGMTFn, func(countrySym, regionName, cityName)begin	local gmt := call NSRuntime.GetHostTimeZone with ();		local countryLocation := nil;	local regionLocation := nil;	local someLocation := nil;		local theStore := GetPackageStore("WorldData");	if (theStore) then	begin		local theSoup := theStore:GetSoup("Cities");		if (theSoup) then		begin			local theCrsr := theSoup:Query(nil);			local theEntry := theCrsr:entry();			while (theEntry <> nil) do			begin				if theEntry.gmt = gmt then				begin					if (someLocation = nil) then						someLocation := theEntry;										if ((countryLocation = nil) and (theEntry.country = countrySym)) then					begin						countryLocation := theEntry;												if ((regionLocation = nil)							and StrEqual(regionName, regionName)) then							regionLocation := theEntry;												if ((StrEqual(cityName, theEntry.name))) then							return theEntry;					end;				end;								theEntry := theCrsr:Next();			end;		end;	end;		if (regionLocation) then return regionLocation;	if (countryLocation) then return countryLocation;	if (someLocation) then return someLocation;		// Otherwise return some random entry.	local protoLocation := Clone(GetUserConfig('location));	protoLocation.gmt := gmt;	return protoLocation;end);