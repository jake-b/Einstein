// ==============================// Fichier:			NSRuntime.cp// Projet:			Einstein NS Runtime// Ecrit par:		Paul Guyot (pguyot@kallisys.net)// // Créé le:			18/1/2005// Tabulation:		4 espaces// // Copyright:		© 2005 by Paul Guyot.// 					Tous droits réservés pour tous pays.// ===========// $Id: NSRuntime.cp 151 2006-01-13 16:15:33Z paul $// ===========// NewtonOS#include <NSandDDKIncludes.h>#include <Unicode.h>#include <NewtonScript.h>#include <OSErrors.h>#include <NameServer.h>#include "TNSRuntimeEventHandler.h"#include "TMainPlatformDriver.impl.h"#include "TNativeCalls.h"#include "Headers/UserInfoDefinitions.h"#include "Headers/PlatformEvents.h"#include "Headers/NativeCallsDefines.h"#include "Headers/Version.h"char* GetCStringFromNSString( RefArg inStr );char* GetCStringFromNSString( RefArg inStr, ULong inSize );// -------------------------------------------------------------------------- ////  * GetCStringFromNSString( RefArg )// -------------------------------------------------------------------------- //char*GetCStringFromNSString( RefArg inStr ){	// Get the string size.	ULong theSize = (Length(inStr) / sizeof(UniChar)) - 1;	return GetCStringFromNSString(inStr, theSize);}// -------------------------------------------------------------------------- ////  * GetCStringFromNSString( RefArg, ULong )// -------------------------------------------------------------------------- //char*GetCStringFromNSString( RefArg inStr, ULong inSize ){	// Get the string size.	char* theBuffer = (char*) ::malloc(inSize + 1);	char* theResult = theBuffer;	// Convert by hand to (pseudo) ISO-8859-1.	ULong theIndex;	UniChar* theUnicodeStr = GetCString(inStr);	for (theIndex = 0; theIndex < inSize; theIndex++)	{		UniChar theChar = *theUnicodeStr++;		*theBuffer++ = theChar & 0xFF;		if (theChar == 0)		{			break;		}	}	theResult[inSize] = 0;		return theResult;}	// -------------------------------------------------------------------------- ////  * InstallHandler( RefArg )// -------------------------------------------------------------------------- //extern "C" RefInstallHandler( RefArg inRcvr ){	(void) new TNSRuntimeEventHandler();	return NILREF;}// -------------------------------------------------------------------------- ////  * GetUserInfo( RefArg )// -------------------------------------------------------------------------- //extern "C" RefGetUserInfo( RefArg inRcvr ){	Ref theResult = AllocateFrame();	Ref theName = AllocateFrame();	TMainPlatformDriver* theDriver = TMainPlatformDriver::GetPlatformDriver();	ULong strSize = theDriver->GetUserInfo(kUserInfo_FirstName, 0, nil);	UniChar* theBuffer = (UniChar*) malloc(strSize);	(void) theDriver->GetUserInfo(kUserInfo_FirstName, strSize, theBuffer);	SetFrameSlot( theName, SYM(first), MakeString( theBuffer ) );		strSize = theDriver->GetUserInfo(kUserInfo_LastName, 0, nil);	theBuffer = (UniChar*) realloc(theBuffer, strSize);	(void) theDriver->GetUserInfo(kUserInfo_LastName, strSize, theBuffer);	SetFrameSlot( theName, SYM(last), MakeString( theBuffer ) );	SetFrameSlot( theResult, SYM(name), theName );	strSize = theDriver->GetUserInfo(kUserInfo_Company, 0, nil);	theBuffer = (UniChar*) realloc(theBuffer, strSize);	(void) theDriver->GetUserInfo(kUserInfo_Company, strSize, theBuffer);	SetFrameSlot( theResult, SYM(company), MakeString( theBuffer ) );	strSize = theDriver->GetUserInfo(kUserInfo_Addr, 0, nil);	theBuffer = (UniChar*) realloc(theBuffer, strSize);	(void) theDriver->GetUserInfo(kUserInfo_Addr, strSize, theBuffer);	SetFrameSlot( theResult, SYM(address), MakeString( theBuffer ) );	strSize = theDriver->GetUserInfo(kUserInfo_Addr2, 0, nil);	theBuffer = (UniChar*) realloc(theBuffer, strSize);	(void) theDriver->GetUserInfo(kUserInfo_Addr2, strSize, theBuffer);	SetFrameSlot( theResult, SYM(address2), MakeString( theBuffer ) );	strSize = theDriver->GetUserInfo(kUserInfo_PostalCode, 0, nil);	theBuffer = (UniChar*) realloc(theBuffer, strSize);	(void) theDriver->GetUserInfo(kUserInfo_PostalCode, strSize, theBuffer);	SetFrameSlot( theResult, SYM(postal_code), MakeString( theBuffer ) );	strSize = theDriver->GetUserInfo(kUserInfo_City, 0, nil);	theBuffer = (UniChar*) realloc(theBuffer, strSize);	(void) theDriver->GetUserInfo(kUserInfo_City, strSize, theBuffer);	SetFrameSlot( theResult, SYM(city), MakeString( theBuffer ) );	strSize = theDriver->GetUserInfo(kUserInfo_Region, 0, nil);	theBuffer = (UniChar*) realloc(theBuffer, strSize);	(void) theDriver->GetUserInfo(kUserInfo_Region, strSize, theBuffer);	SetFrameSlot( theResult, SYM(region), MakeString( theBuffer ) );	strSize = theDriver->GetUserInfo(kUserInfo_Country, 0, nil);	theBuffer = (UniChar*) realloc(theBuffer, strSize);	(void) theDriver->GetUserInfo(kUserInfo_Country, strSize, theBuffer);	SetFrameSlot( theResult, SYM(country), MakeString( theBuffer ) );	strSize = theDriver->GetUserInfo(kUserInfo_CountryISOCode, 0, nil);	theBuffer = (UniChar*) realloc(theBuffer, strSize);	(void) theDriver->GetUserInfo(kUserInfo_CountryISOCode, strSize, theBuffer);	SetFrameSlot( theResult, SYM(countryISOCode),		NSCallGlobalFn(SYM(Intern), MakeString( theBuffer )) );	RefVar phones = AllocateArray(NILREF, 0);	strSize = theDriver->GetUserInfo(kUserInfo_HomePhone, 0, nil);	if (strSize > 2)	{		theBuffer = (UniChar*) realloc(theBuffer, strSize);		(void) theDriver->GetUserInfo(kUserInfo_HomePhone, strSize, theBuffer);		RefVar thePhone = MakeString( theBuffer );		SetClass(thePhone, SYM(homePhone));		AddArraySlot(phones, thePhone);	}	strSize = theDriver->GetUserInfo(kUserInfo_HomeFaxPhone, 0, nil);	if (strSize > 2)	{		theBuffer = (UniChar*) realloc(theBuffer, strSize);		(void) theDriver->GetUserInfo(kUserInfo_HomeFaxPhone, strSize, theBuffer);		RefVar thePhone = MakeString( theBuffer );		SetClass(thePhone, SYM(homefaxPhone));		AddArraySlot(phones, thePhone);	}	strSize = theDriver->GetUserInfo(kUserInfo_WorkPhone, 0, nil);	if (strSize > 2)	{		theBuffer = (UniChar*) realloc(theBuffer, strSize);		(void) theDriver->GetUserInfo(kUserInfo_WorkPhone, strSize, theBuffer);		RefVar thePhone = MakeString( theBuffer );		SetClass(thePhone, SYM(workPhone));		AddArraySlot(phones, thePhone);	}	strSize = theDriver->GetUserInfo(kUserInfo_WorkFaxPhone, 0, nil);	if (strSize > 2)	{		theBuffer = (UniChar*) realloc(theBuffer, strSize);		(void) theDriver->GetUserInfo(kUserInfo_WorkFaxPhone, strSize, theBuffer);		RefVar thePhone = MakeString( theBuffer );		SetClass(thePhone, SYM(faxPhone));		AddArraySlot(phones, thePhone);	}	SetFrameSlot( theResult, SYM(phones), phones );		free(theBuffer);	return theResult;}// -------------------------------------------------------------------------- ////  * BreakInMonitor( RefArg )// -------------------------------------------------------------------------- //extern "C" RefBreakInMonitor( RefArg inRcvr ){	TMainPlatformDriver::GetPlatformDriver()->BreakInMonitor();	return NILREF;}// -------------------------------------------------------------------------- ////  * Log( RefArg, RefArg )// -------------------------------------------------------------------------- //extern "C" RefLog( RefArg inRcvr, RefArg inString ){	char* theString = GetCStringFromNSString(inString);	TMainPlatformDriver::GetPlatformDriver()->Log(theString);	::free(theString);	return NILREF;}// -------------------------------------------------------------------------- ////  * GetHostTimeZone( RefArg )// -------------------------------------------------------------------------- //extern "C" RefGetHostTimeZone( RefArg inRcvr ){	return MAKEINT(TMainPlatformDriver::GetPlatformDriver()->GetHostTimeZone());}// -------------------------------------------------------------------------- ////  * CalibrateTablet( RefArg )// -------------------------------------------------------------------------- //extern "C" RefCalibrateTablet( RefArg inRcvr ){	TMainPlatformDriver::GetPlatformDriver()->CalibrateTablet();	return NILREF;}// -------------------------------------------------------------------------- ////  * QuitEinstein( RefArg )// -------------------------------------------------------------------------- //extern "C" RefQuitEinstein( RefArg inRcvr ){	TMainPlatformDriver::GetPlatformDriver()->QuitEinstein();	return NILREF;}// -------------------------------------------------------------------------- ////  * NativeCalls_OpenLib( RefArg, RefArg )// -------------------------------------------------------------------------- //extern "C" RefNativeCalls_OpenLib( RefArg inRcvr, RefArg inPath ){	TNativeCalls* theNativeCalls =		TMainPlatformDriver::GetPlatformDriver()->GetNativeCalls();	char* thePath = GetCStringFromNSString(inPath);	ULong theRef = theNativeCalls->OpenLib(thePath);	::free(thePath);	return MAKEINT(theRef);}// -------------------------------------------------------------------------- ////  * NativeCalls_CloseLib( RefArg, RefArg )// -------------------------------------------------------------------------- //extern "C" RefNativeCalls_CloseLib( RefArg inRcvr, RefArg inLibRef ){	TNativeCalls* theNativeCalls =		TMainPlatformDriver::GetPlatformDriver()->GetNativeCalls();	theNativeCalls->CloseLib(RINT(inLibRef));	return NILREF;}// -------------------------------------------------------------------------- ////  * NativeCalls_PrepareFFIStructure( RefArg, RefArg, RefArg, RefArg )// -------------------------------------------------------------------------- //extern "C" RefNativeCalls_PrepareFFIStructure(			RefArg inRcvr,			RefArg inLibRef,			RefArg inSymbol,			RefArg inNbArgs){	TNativeCalls* theNativeCalls =		TMainPlatformDriver::GetPlatformDriver()->GetNativeCalls();	ULong libRef = RINT(inLibRef);	const char* theSymbol = GetCStringFromNSString(inSymbol);	ULong nbArgs = RINT(inNbArgs);	ULong theRef = theNativeCalls->PrepareFFIStructure(libRef, theSymbol, nbArgs);	::free(theSymbol);	return MAKEINT(theRef);}// -------------------------------------------------------------------------- ////  * NativeCalls_SetArgValueAndType( RefArg, RefArg, RefArg, RefArg, RefArg )// -------------------------------------------------------------------------- //extern "C" RefNativeCalls_SetArgValueAndType(			RefArg inRcvr,			RefArg inFFIRef,			RefArg inArgIx,			RefArg inValue,			RefArg inType){	TNativeCalls* theNativeCalls =		TMainPlatformDriver::GetPlatformDriver()->GetNativeCalls();	ULong ffiRef = RINT(inFFIRef);	ULong argIx = RINT(inArgIx);	if (SymbolCompareLex(inType, SYM(uint8)) == 0)	{		if (ISINT(inValue))		{			theNativeCalls->SetArgValue_uint8(ffiRef, argIx, RINT(inValue));		} else {			ThrowBadTypeWithFrameData(kNSErrNotAnInteger, inValue);		}	} else if (SymbolCompareLex(inType, SYM(sint8)) == 0) {		if (ISINT(inValue))		{			theNativeCalls->SetArgValue_sint8(ffiRef, argIx, RINT(inValue));		} else {			ThrowBadTypeWithFrameData(kNSErrNotAnInteger, inValue);		}	} else if (SymbolCompareLex(inType, SYM(uint16)) == 0) {		if (ISINT(inValue))		{			theNativeCalls->SetArgValue_uint16(ffiRef, argIx, RINT(inValue));		} else {			ThrowBadTypeWithFrameData(kNSErrNotAnInteger, inValue);		}	} else if (SymbolCompareLex(inType, SYM(sint16)) == 0) {		if (ISINT(inValue))		{			theNativeCalls->SetArgValue_sint16(ffiRef, argIx, RINT(inValue));		} else {			ThrowBadTypeWithFrameData(kNSErrNotAnInteger, inValue);		}	} else if (SymbolCompareLex(inType, SYM(uint32)) == 0) {		if (ISINT(inValue))		{			theNativeCalls->SetArgValue_uint16(ffiRef, argIx, RINT(inValue));		} else {			ThrowBadTypeWithFrameData(kNSErrNotAnInteger, inValue);		}	} else if (SymbolCompareLex(inType, SYM(sint32)) == 0) {		if (ISINT(inValue))		{			theNativeCalls->SetArgValue_sint16(ffiRef, argIx, RINT(inValue));		} else {			ThrowBadTypeWithFrameData(kNSErrNotAnInteger, inValue);		}	} else if (SymbolCompareLex(inType, SYM(uint64)) == 0) {		if (ISINT(inValue))		{//			theNativeCalls->SetArgValue_uint64(ffiRef, argIx, RINT(inValue));		} else {			ThrowBadTypeWithFrameData(kNSErrNotAnInteger, inValue);		}	} else if (SymbolCompareLex(inType, SYM(sint64)) == 0) {		if (ISINT(inValue))		{//			theNativeCalls->SetArgValue_sint64(ffiRef, argIx, RINT(inValue));		} else {			ThrowBadTypeWithFrameData(kNSErrNotAnInteger, inValue);		}	} else if (SymbolCompareLex(inType, SYM(float)) == 0) {		if (IsNumber(inValue))		{			theNativeCalls->SetArgValue_float(ffiRef, argIx, CoerceToDouble(inValue));		} else {			ThrowBadTypeWithFrameData(kNSErrNotANumber, inValue);		}	} else if (SymbolCompareLex(inType, SYM(double)) == 0) {		if (IsNumber(inValue))		{			theNativeCalls->SetArgValue_double(ffiRef, argIx, CoerceToDouble(inValue));		} else {			ThrowBadTypeWithFrameData(kNSErrNotANumber, inValue);		}	} else if (SymbolCompareLex(inType, SYM(longdouble)) == 0) {		if (IsNumber(inValue))		{			theNativeCalls->SetArgValue_longdouble(ffiRef, argIx, CoerceToDouble(inValue));		} else {			ThrowBadTypeWithFrameData(kNSErrNotANumber, inValue);		}	} else if ((SymbolCompareLex(inType, SYM(string)) == 0)		|| (SymbolCompareLex(inType, SYM(iostring)) == 0)) {		if (IsString(inValue))		{			ULong theSize = (Length(inValue) / sizeof(UniChar)) - 1;			char* theString = GetCStringFromNSString(inValue, theSize);			theNativeCalls->SetArgValue_string(ffiRef, argIx, theString, theSize);			::free(theString);		} else {			ThrowBadTypeWithFrameData(kNSErrNotAString, inValue);		}	} else if ((SymbolCompareLex(inType, SYM(binary)) == 0)		|| (SymbolCompareLex(inType, SYM(iobinary)) == 0)) {		if (IsBinary(inValue))		{			ULong theSize = Length(inValue);			WITH_LOCKED_BINARY(inValue, binaryPtr)				theNativeCalls->SetArgValue_binary(ffiRef, argIx, binaryPtr, theSize);			END_WITH_LOCKED_BINARY(inValue)		} else {			ThrowBadTypeWithFrameData(kNSErrNotABinaryObject, inValue);		}	} else if (SymbolCompareLex(inType, SYM(pointer)) == 0) {		if (ISINT(inValue))		{			theNativeCalls->SetArgValue_pointer(ffiRef, argIx, (ULong) inValue);		} else if (IsBinary(inValue)) {			WITH_LOCKED_BINARY(inValue, binaryPtr)				ULong thePtr = *((ULong*) binaryPtr);				theNativeCalls->SetArgValue_pointer(ffiRef, argIx, thePtr);			END_WITH_LOCKED_BINARY(inValue)		} else {			ThrowBadTypeWithFrameData(kNSErrNotABinaryObject, inValue);		}	} else {		ThrowBadTypeWithFrameData(kNSErrNotASymbol, inType);	}	return NILREF;}// -------------------------------------------------------------------------- ////  * NativeCalls_SetResultType( RefArg, RefArg, RefArg )// -------------------------------------------------------------------------- //extern "C" RefNativeCalls_SetResultType(			RefArg inRcvr,			RefArg inFFIRef,			RefArg inType){	TNativeCalls* theNativeCalls =		TMainPlatformDriver::GetPlatformDriver()->GetNativeCalls();	ULong ffiRef = RINT(inFFIRef);	ULong theType;	if (SymbolCompareLex(inType, SYM(void)) == 0)	{		theType = k_void;	} else if (SymbolCompareLex(inType, SYM(uint8)) == 0) {		theType = k_uint8;	} else if (SymbolCompareLex(inType, SYM(sint8)) == 0) {		theType = k_sint8;	} else if (SymbolCompareLex(inType, SYM(uint16)) == 0) {		theType = k_uint16;	} else if (SymbolCompareLex(inType, SYM(sint16)) == 0) {		theType = k_sint16;	} else if (SymbolCompareLex(inType, SYM(uint32)) == 0) {		theType = k_uint32;	} else if (SymbolCompareLex(inType, SYM(sint32)) == 0) {		theType = k_sint32;	} else if (SymbolCompareLex(inType, SYM(uint64)) == 0) {		theType = k_uint64;	} else if (SymbolCompareLex(inType, SYM(sint64)) == 0) {		theType = k_sint64;	} else if (SymbolCompareLex(inType, SYM(float)) == 0) {		theType = k_float;	} else if (SymbolCompareLex(inType, SYM(double)) == 0) {		theType = k_double;	} else if (SymbolCompareLex(inType, SYM(longdouble)) == 0) {		theType = k_longdouble;	} else if (SymbolCompareLex(inType, SYM(string)) == 0) {		theType = k_string;	} else if (SymbolCompareLex(inType, SYM(binary)) == 0) {		theType = k_binary;	} else if (SymbolCompareLex(inType, SYM(pointer)) == 0) {		theType = k_pointer;	} else {		ThrowBadTypeWithFrameData(kNSErrNotASymbol, inType);	}	theNativeCalls->SetResultType(ffiRef, theType);	return NILREF;}// -------------------------------------------------------------------------- ////  * NativeCalls_Call( RefArg, RefArg, RefArg )// -------------------------------------------------------------------------- //extern "C" RefNativeCalls_Call(			RefArg inRcvr,			RefArg inFFIRef,			RefArg inReturnType){	RefVar theResult;	TNativeCalls* theNativeCalls =		TMainPlatformDriver::GetPlatformDriver()->GetNativeCalls();	ULong ffiRef = RINT(inFFIRef);	ULong theType;	if ((SymbolCompareLex(inReturnType, SYM(void)) == 0)		|| (SymbolCompareLex(inReturnType, SYM(uint8)) == 0)		|| (SymbolCompareLex(inReturnType, SYM(sint8)) == 0)		|| (SymbolCompareLex(inReturnType, SYM(uint16)) == 0)		|| (SymbolCompareLex(inReturnType, SYM(sint16)) == 0)		|| (SymbolCompareLex(inReturnType, SYM(uint32)) == 0)		|| (SymbolCompareLex(inReturnType, SYM(sint32)) == 0)		|| (SymbolCompareLex(inReturnType, SYM(uint64)) == 0)		|| (SymbolCompareLex(inReturnType, SYM(sint64)) == 0)) {		theResult = MAKEINT(theNativeCalls->Call_int(ffiRef));	} else if ((SymbolCompareLex(inReturnType, SYM(float)) == 0)		|| (SymbolCompareLex(inReturnType, SYM(double)) == 0)		|| (SymbolCompareLex(inReturnType, SYM(longdouble)) == 0)) {		theResult = MakeReal(theNativeCalls->Call_real(ffiRef));	} else if (SymbolCompareLex(inReturnType, SYM(string)) == 0) {		char* theResultBuffer = (char*) ::malloc(1024);		theNativeCalls->Call_string(ffiRef, theResultBuffer, 1023);		theResultBuffer[1023] = '\0';		theResult = MakeString(theResultBuffer);		::free(theResultBuffer);	} else if (SymbolCompareLex(inReturnType, SYM(pointer)) == 0) {		ULong thePointer = theNativeCalls->Call_pointer(ffiRef);		theResult = AllocateBinary(SYM(pointer), sizeof(thePointer));		WITH_LOCKED_BINARY(theResult, theResultPtr)			*((ULong*) theResultPtr) = thePointer;		END_WITH_LOCKED_BINARY(theResult)	} else {		ThrowBadTypeWithFrameData(kNSErrNotASymbol, inReturnType);	}	return theResult;}// -------------------------------------------------------------------------- ////  * NativeCalls_GetOutArgValue( RefArg, RefArg, RefArg, RefArg, RefArg )// -------------------------------------------------------------------------- //extern "C" RefNativeCalls_GetOutArgValue(			RefArg inRcvr,			RefArg inFFIRef,			RefArg inArgIx,			RefArg inValue,			RefArg inType){	TNativeCalls* theNativeCalls =		TMainPlatformDriver::GetPlatformDriver()->GetNativeCalls();	ULong ffiRef = RINT(inFFIRef);	ULong argIx = RINT(inArgIx);	if (SymbolCompareLex(inType, SYM(iostring)) == 0) {		if (IsString(inValue))		{			ULong theMaxSize = Length(inValue) / 2;			char* theString = (char*) ::malloc(theMaxSize);			theNativeCalls->GetOutArgValue_string(				ffiRef, argIx, theString, theMaxSize - 1);			TMainPlatformDriver::GetPlatformDriver()->Log(theString);			// Copy back.			int theLen = strlen(theString);			UniChar* theNewString = (UniChar*) ::malloc((theLen + 1) * 2);			int indexStr;			for (indexStr = 0; indexStr <= theLen; indexStr++)			{				theNewString[indexStr] = theString[indexStr];			}			// Free the ISO-8859-1 copy.			::free(theString);			// Create a NS string from the Unicode copy.			RefVar theNSString = MakeString(theNewString);			// Free the Unicode copy.			::free(theNewString);			// Munger to the argument.			StrMunger(inValue, 0, -1, theNSString, 0, theLen);		} else {			ThrowBadTypeWithFrameData(kNSErrNotAString, inValue);		}	} else if (SymbolCompareLex(inType, SYM(iobinary)) == 0) {		if (IsBinary(inValue))		{			ULong theSize = Length(inValue);			WITH_LOCKED_BINARY(inValue, binaryPtr)				theNativeCalls->GetOutArgValue_binary(ffiRef, argIx, binaryPtr, theSize);			END_WITH_LOCKED_BINARY(inValue)		} else {			ThrowBadTypeWithFrameData(kNSErrNotABinaryObject, inValue);		}	} else {		ThrowBadTypeWithFrameData(kNSErrNotASymbol, inType);	}	return NILREF;}// -------------------------------------------------------------------------- ////  * NativeCalls_DisposeFFIStructure( RefArg, RefArg, RefArg, RefArg )// -------------------------------------------------------------------------- //extern "C" RefNativeCalls_DisposeFFIStructure(			RefArg inRcvr,			RefArg inFFIRef){	TNativeCalls* theNativeCalls =		TMainPlatformDriver::GetPlatformDriver()->GetNativeCalls();	ULong ffiRef = RINT(inFFIRef);	theNativeCalls->DisposeFFIStructure(ffiRef);	return NILREF;}// -------------------------------------------------------------------------- ////  * NativeCalls_GetErrno( RefArg )// -------------------------------------------------------------------------- //extern "C" RefNativeCalls_GetErrno( RefArg inRcvr ){	TNativeCalls* theNativeCalls =		TMainPlatformDriver::GetPlatformDriver()->GetNativeCalls();	return MAKEINT(theNativeCalls->GetErrno());}// -------------------------------------------------------------------------- ////  * NativeCalls_GetErrorMessage( RefArg )// -------------------------------------------------------------------------- //extern "C" RefNativeCalls_GetErrorMessage( RefArg inRcvr ){	TNativeCalls* theNativeCalls =		TMainPlatformDriver::GetPlatformDriver()->GetNativeCalls();	char* theString = (char*) ::malloc(512);	theNativeCalls->GetErrorMessage(theString, 512);	RefVar theResult = MakeString(theString);	::free(theString);	return theResult;}// -------------------------------------------------------------------------- ////  * ConvertToUniStr( RefArg, RefArg, RefArg )// -------------------------------------------------------------------------- //extern "C" RefConvertToUniStr( RefArg inRcvr, RefArg inBinary, RefArg inEncoding ){	RefVar theResult = NILREF;	ULong size = Length(inBinary);	if (SymbolCompareLex(inEncoding, SYM(ISO88591)) == 0) {		UniChar* theString =			(UniChar*) ::malloc((size + 1) * sizeof(UniChar));		ULong index;		UniChar* dst = theString;		WITH_LOCKED_BINARY(inBinary, binaryPtr)			char* src = (char*) binaryPtr;			for (index = 0; index < size; index++)			{				char theChar = *src++;				*dst++ = theChar;			}		END_WITH_LOCKED_BINARY(inBinary)		*dst = 0;		theResult = MakeString(theString);		::free(theString);	} else {		ThrowBadTypeWithFrameData(kNSErrNotASymbol, inEncoding);	}	return theResult;}// -------------------------------------------------------------------------- ////  * ConvertFromUniStr( RefArg, RefArg, RefArg )// -------------------------------------------------------------------------- //extern "C" RefConvertFromUniStr( RefArg inRcvr, RefArg inString, RefArg inEncoding ){	RefVar theResult = NILREF;	ULong size = (Length(inString) + 2) / sizeof(UniChar);	if (SymbolCompareLex(inEncoding, SYM(ISO88591)) == 0) {		theResult = AllocateBinary(SYM(text), size);		ULong index;		WITH_LOCKED_BINARY(inString, stringPtr)			UniChar* src = (UniChar*) stringPtr;			WITH_LOCKED_BINARY(theResult, binaryPtr)				char* dst = (char*) binaryPtr;				for (index = 0; index < size; index++)				{					UniChar theChar = *src++;					*dst++ = (theChar & 0xFF);				}				*dst = 0;			END_WITH_LOCKED_BINARY(theResult)		END_WITH_LOCKED_BINARY(inString)	} else {		ThrowBadTypeWithFrameData(kNSErrNotASymbol, inEncoding);	}	return theResult;}// -------------------------------------------------------------------------- ////  * DisposeBuffer( RefArg, RefArg )// -------------------------------------------------------------------------- //extern "C" RefDisposeBuffer( RefArg inRcvr, RefArg inID ){	Boolean theResult =		TMainPlatformDriver::GetPlatformDriver()->DisposeBuffer(RINT(inID));	return theResult ? TRUEREF : NILREF;}// -------------------------------------------------------------------------- ////  * CopyBufferData( RefArg, RefArg, RefArg, RefArg )// -------------------------------------------------------------------------- //extern "C" RefCopyBufferData( RefArg inRcvr, RefArg inID, RefArg inOffset, RefArg inAmount ){	RefVar theResult = AllocateBinary(SYM(data), inAmount);		Boolean gotData;	WITH_LOCKED_BINARY(theResult, theBinaryPtr)		gotData =			TMainPlatformDriver::GetPlatformDriver()->CopyBufferData(				RINT(inID),				theBinaryPtr,				RINT(inOffset),				RINT(inAmount));	END_WITH_LOCKED_BINARY(theResult)		if (!gotData)	{		theResult = NILREF;	}	return theResult;}// -------------------------------------------------------------------------- ////  * GetEinsteinVersionString( RefArg )// -------------------------------------------------------------------------- //extern "C" RefGetEinsteinVersionString( RefArg inStr ){	return MakeString(VERSION_STRING_SHORT);}// ====================================================== //// "Yacc" owes much to a most stimulating collection oEOF //// ====================================================== //