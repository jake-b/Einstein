/*	NIE-bindings.*/DefConst('kInetErrNoSuchLinkID, -60501);DefConst('kInetServicesSymbol, '|InetServices:NIE|);knownGlobalFunctions.InetIPStringToAddress := 1;knownGlobalFunctions.InetIsSameIPAddress := 2;knownGlobalFunctions.InetGrabLink := 3;knownGlobalFunctions.InetReleaseLink := 3;DefConst('kNIEGlobalFns,{	// Link Controller Functions and Methods	InetAddNewLinkEntry: func(newLinkInfo)		begin			Throw('|evt.ex.einstein.unsupported;type.ref.symbol.func|, 'InetAddNewLinkEntry);		end,	InetAddNewLinkEntryInternal: func(newLinkInfo)		begin			Throw('|evt.ex.einstein.unsupported;type.ref.symbol.func|, 'InetAddNewLinkEntryInternal);		end,	InetBuildStatusFrame: func(linkID, infoStatus, infoError, infoText1, infoText2, infoText3)		begin			Throw('|evt.ex.einstein.unsupported;type.ref.symbol.func|, 'InetBuildStatusFrame);		end,	InetCancelCurrentRequest: func(linkID)		begin			Throw('|evt.ex.einstein.unsupported;type.ref.symbol.func|, 'InetCancelCurrentRequest);		end,	InetCancelLink: func(linkID, clientFrame, clientSymbol)		begin			Throw('|evt.ex.einstein.unsupported;type.ref.symbol.func|, 'InetCancelLink);		end,	InetDisconnectLink: func(linkID, clientFrame, clientSymbol)		begin			Throw('|evt.ex.einstein.unsupported;type.ref.symbol.func|, 'InetDisconnectLink);		end,	InetDisplayStatus: func(linkID, statusView, statusFrame)		begin			Throw('|evt.ex.einstein.unsupported;type.ref.symbol.func|, 'InetDisplayStatus);		end,	InetGetAllLinksStatus: func()		begin			return {				LinkIDs: [0],				statuses: ['connected],				names: ["Host"]			};		end,	InetGetDefaultLinkID: func()		begin			return 0;		end,	InetGetIPAddress: func(addrSymbol)		begin			if (addrSymbol = 'localAddress) then			begin			end else if (addrSymbol = 'gatewayAddress) then			begin			end;						Throw('|evt.ex.einstein.unsupported;type.ref.symbol.func|, 'InetGetIPAddress);		end,	InetGetLinkEntry: func(linkID)		begin			if ((linkID = nil) or (linkID = 0)) then			begin				return {					version: 3,					tags: 'INET,					linkID: 0,					class: '|Einstein:NIE|,					setupName: "Einstein"				};			end else begin				return nil;			end;		end,	InetGetLinkStatus: func(linkID)		begin			if ((linkID = nil) or (linkID = 0)) then				return 'connected;			else				return 'error;		end,		InetGrabLinkVerbose: func(linkID, clientContext, clientCallback)		begin			InetGrabLink(linkID, clientContext, clientCallback);		end,	InetGrabLink: func(linkID, clientContext, clientCallback)		begin			local status := { linkStatus: 'connected };			local err := nil;			if ((linkID) and (linkID <> 0)) then			begin				status.linkStatus := 'error;				err := kInetErrNoSuchLinkID;			end else				Perform(clientContext, clientCallback, [ 0, status, err ] );		end,	InetIPAddressToString: func(addrArray)		begin			return addrArray[0] & "." & addrArray[1] & "." & addrArray[2] & "." & addrArray[3];		end,	InetIPStringToAddress: func(str)		begin			local theResult := [];			local tokenizer := StrTokenize(str, $.);			while x := call tokenizer with () do			begin				local octet := StringToNumber(x);				if octet = nil then return nil;				if (floor(octet) <> ceiling(octet)) then return nil;				if (octet < 0) or (octet > 255) then return nil;				AddArraySlot(theResult, floor(octet));			end;						if Length(theResult) <> 4 then return nil;			return theResult;		end,	InetIsSameIPAddress: func(addrArray1, addrArray2)		begin			if (Length(addrArray1) = Length(addrArray2) = 4) then			begin				for index := 0 to 3 do				begin					local octet := addrArray1[index];					if not IsInteger(octet) or octet < 0 or octet > 255						or octet <> addrArray2[index] then return nil;				end;				return true;			end;						return nil;		end,	InetIsSameIPAddressStr: func(str1, str2)		begin			local addr1 := InetIPStringToAddress( str1 );			if (addr1) then			begin				local addr2 := InetIPStringToAddress( str2 );				if (addr2) then					return InetIsSameIPAddress(addr1, addr2);			end;			return nil;		end,	InetIsValidIPAddress: func(addrArray)		begin			if (Length(addrArray) = 4) then			begin				for index := 0 to 3 do				begin					local octet := addrArray[index];					if not IsInteger(octet) or octet < 0 or octet > 255						then return nil;				end;				return true;			end;						return nil;		end,	InetIsValidIPAddressStr: func(str)		begin			return InetIPStringToAddress(str) <> nil;		end,	InetIsZeroIPAddress: func(addrArray)		begin			return (Length(addrArray) = 4)				and (addrArray[0] = 0)				and (addrArray[1] = 0)				and (addrArray[2] = 0)				and (addrArray[3] = 0);		end,	InetOpenConnectionSlip: func(linkID, clientContext, clientCallback)		begin			Perform(clientContext, clientCallback, ['connect]);			return nil;		end,	InetReleaseLinkVerbose: func(linkID, clientContext, clientCallback)		begin			InetReleaseLink(linkID, clientContext, clientCallback);		end,	InetReleaseLink: func(linkID, clientContext, clientCallback)		begin			local status := { linkStatus: 'connected };			local err := nil;			if ((linkID) and (linkID <> 0)) then			begin				status.linkStatus := 'error;				err := kInetErrNoSuchLinkID;			end else				Perform(clientContext, clientCallback, [0, status, err] );		end,	InetSetDefaultLinkID: func(linkID)		begin			if ((linkID) and (linkID <> 0)) then			begin				err := kInetErrNoSuchLinkID;				return err;			end else				return nil;		end,	RegInetLinkStatusChange: func(symbol, clientContext, clientCallback)		begin			// Link status never changes.			return symbol;		end,	UnRegInetLinkStatusChange: func(symbol)		begin			// Link status never changes.		end,	// Domain Name Service Functions and Methods	DNSCancelRequests: func(clientFrame, clientSymbol)		begin			Throw('|evt.ex.einstein.unsupported;type.ref.symbol.func|, 'DNSCancelRequests);		end,		DNSGetAddressFromName: func(name, clientFrame, clientSymbol)		begin			Throw('|evt.ex.einstein.unsupported;type.ref.symbol.func|, 'DNSGetAddressFromName);		end,		DNSGetMailAddressFromName: func(name, clientFrame, clientSymbol)		begin			Throw('|evt.ex.einstein.unsupported;type.ref.symbol.func|, 'DNSGetMailAddressFromName);		end,	DNSGetMailServerNameFromDomainName: func(name, clientFrame, clientSymbol)		begin			Throw('|evt.ex.einstein.unsupported;type.ref.symbol.func|, 'DNSGetMailServerNameFromDomainName);		end,	DNSGetNameFromAddress: func(address, clientFrame, clientSymbol)		begin			Throw('|evt.ex.einstein.unsupported;type.ref.symbol.func|, 'DNSGetNameFromAddress);		end,		// Newton Internet Debugging Functions	InetObjectToString: func(object)		begin			// Not equivalent, but should be sufficient.			return SPrintObject(object);		end,	// Newton Internet Enabler Error Functions		InetGetErrorString: func(errorNum)		begin			local result := TableLookup([					kInetErrNoSuchLinkID, "No such link ID",				], errorNum);			if not result then result := TableLookup(ROM_errorTable, errorNum);			if not result then result := "Unknown error " & errorNum;						return result;		end,	InetGetExceptionError: func(exception)		begin			return 0;		end,});DefConst('kInstallNIEBindings, func()begin	foreach s,v in kNIEGlobalFns do DefGlobalFn(s, v);		// Notify clients that we're installed.	SetUserConfig( kInetServicesSymbol, true );end);DefConst('kUninstallNIEBindings, func()begin	foreach s,v in kNIEGlobalFns do UndefGlobalFn(s);end);