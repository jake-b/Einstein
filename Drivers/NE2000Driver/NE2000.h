/*	File:		NE2000.h	Contains:	Definitions for NE2000 Ethernet PCMCIA card				You may incorporate this sample code into your applications without				restriction.  This sample code has been provided "AS IS" and the				responsibility for its operation is 100% yours.  You are not				permitted to modify and redistribute the source as "DDK Sample Code."				If you are going to re-distribute the source, we require that you				make it clear in the source that the code was descended from				Apple-provided sample code, but that you've made changes.	Copyright:	© 1997 by Apple Computer, Inc., all rights reserved.	Obtained from NIE2.0 F1C2 build. 9/4/97*/#ifndef __NE2000_H#define __NE2000_H#ifndef __NEWTON_H#include "Newton.h"#endif////	NIC Core Registers: offset from 0x00 to 0x0F, 8-bit only////		NOTE: Register offfsets have been converted to little endian address//		(The ARM processor does 32-bit big-endian read and write. The PCMCIA bus is a 16-bit little-endian bus)////  Page 0 registers (Read)#define kNICCommandRegOffset				(0x00 ^ 3)		// R/W	Command Reg offset#define 	kNICCommandStop					0x01			//		Stop, disable NIC#define 	kNICCommandStart				0x02			//		Start, activate NIC#define 	kNICCommandTransmitPacket		0x04			//		Transmit Packet#define 	kNICCommandRemoteDMACmdMask		0x38			//		Remote DMA Command Bits Mask#define 	kNICCommandRemoteDMARead		0x08			//			Remote DMA Read#define 	kNICCommandRemoteDMAWrite		0x10			//			Remote DMA Write#define 	kNICCommandRemoteDMASendPacket	0x18			//			Remote DMA Send Packet#define 	kNICCommandRemoteDMAAbort		0x20			//			Remote DMA Abort#define 	kNICCommandPageSelectMask		0xC0			//		Page Select Mask#define 	kNICCommandPageSelect0			0x00			//			Page Select 0#define 	kNICCommandPageSelect1			0x40			//			Page Select 1#define 	kNICCommandPageSelect2			0x80			//			Page Select 2#define kNICCurrentLocalDMAAddr0RegOffset	(0x01 ^ 3)		// R	Current Local DMA Addr 0 Reg offset (A7-A0)#define kNICCurrentLocalDMAAddr1RegOffset	(0x02 ^ 3)		// R	Current Local DMA Addr 1 Reg offset (A15-A8)#define kNICBoundaryPointerRegOffset		(0x03 ^ 3)		// R/W	Boundary Pointer Reg offset (A15-A8)#define kNICTransmitStatusRegOffset			(0x04 ^ 3)		// R	Transmit Status Reg offset#define 	kNICTransStatusTransmitted		0x01			//		Transmitted#define 	kNICTransStatusReserved			0x02			//		Reserved#define 	kNICTransStatusCollided			0x04			//		Collided (recorded in Number Of Colisions reg)#define 	kNICTransStatusAborted			0x08			//		Aborted (Excecced 16 collisions)#define 	kNICTransStatusCarrierSenseLost 0x10			//		Carrier Sense Lost (not aborted)#define 	kNICTransStatusFIFOUnderrun		0x20			//		FIFO Underrun (aborted)#define 	kNICTransStatusCDHeartbeat		0x40			//		Collision Detect Heartbeat#define 	kNICTransStatusOutWinCollision	0x80			//		Out of WIndow Collision#define kNICNumOfCollisionsRegOffset		(0x05 ^ 3)		// R	Number of Collisions Reg offset#define kNICFIFORegOffset					(0x06 ^ 3)		// R	FIFO Reg offset#define kNICInterruptStatusRegOffset		(0x07 ^ 3)		// R/W	Interrupt Status Reg offset (write 1 to clear)#define 	kNICInterruptPacketReceived		0x01			//		Packet Received#define 	kNICInterruptPacketTransmitted	0x02			//		Packet Transmitted#define 	kNICInterruptReceiveError		0x04			//		Receive Error (CRC, frame alignment, FIFO overrun, missing packet)#define 	kNICInterruptTransmitError		0x08			//		Transmit Error (excessive collisions)#define 	kNICInterruptOverwriteWarning	0x10			//		Overwrite Warning (receive buffer overflow)#define 	kNICInterruptCounterOverflow	0x20			//		Tally Counter overflow (one or more MSB set)#define 	kNICInterruptRemoteDMAComplete	0x40			//		Remote DMA Complete#define 	kNICInterruptResetStatus		0x80			//		Reset Status (idle or buffer overflow)#define 	kNICRxInterrupts				(kNICInterruptPacketReceived | kNICInterruptReceiveError | kNICInterruptOverwriteWarning)#define 	kNICTxInterrupts				(kNICInterruptPacketTransmitted | kNICInterruptTransmitError)#define kNICCurrentRemoteDMAAddr0RegOffset	(0x08 ^ 3)		// R	Current Remote DMA Addr 0 Reg offset (A7-A0)#define kNICCurrentRemoteDMAAddr1RegOffset	(0x09 ^ 3)		// R	Current Remote DMA Addr 1 Reg offset (A15-A8)#define kNICReservedARegOffset				(0x0A ^ 3)		// R	Reserved Reg offset#define kNICReservedBRegOffset				(0x0B ^ 3)		// R	Reserved Reg offset#define kNICReceiveStatusRegOffset			(0x0C ^ 3)		// R	Receive Status Reg offset#define 	kNICReceiveStatusReceivedOK		0x01			//		Received Intact#define 	kNICReceiveStatusCRCError		0x02			//		CRC Error#define 	kNICReceiveStatusFrameAlignErr	0x04			//		Frame Alignment Error#define 	kNICReceiveStatusFIFOOverrun	0x08			//		FIFO Overrun#define 	kNICReceiveStatusMissedPacket	0x10			//		Missed Packet (lack of buffer or in monitor mode)#define 	kNICReceiveStatusMulticastAddr	0x20			//		Multicasr/Broadcast addr Match#define 	kNICReceiveStatusReceiverOff	0x40			//		Receiver Disabled (in monitor mode)#define 	kNICReceiveStatusDeferring		0x80			//		Deferring (jabber condition)#define kNICTallyCounter0RegOffset			(0x0D ^ 3)		// R	Tally Counter 0 Reg offset (Frame alignment errors)#define kNICTallyCounter1RegOffset			(0x0E ^ 3)		// R	Tally Counter 1 Reg offset (CRC errors)#define kNICTallyCounter2RegOffset			(0x0F ^ 3)		// R	Tally Counter 2 Reg offset (Missed packet errors)															//		Counter interupts at 0x128, max out at 0x192, //  Page 0 registers (Write)//#define kNICCommandRegOffset				(0x00 ^ 3)		// R/W	Command Reg offset#define kNICPageStartRegOffset				(0x01 ^ 3)		// W	Page Start Reg offset (A15-A8)#define kNICPageStopRegOffset				(0x02 ^ 3)		// W	Page Stop Reg offset (A15-A8)//#define kNICBoundaryPointerRegOffset		(0x03 ^ 3)		// R/W	Boundary Pointer Reg offset (A15-A8)#define kNICTransmitPageStartRegOffset		(0x04 ^ 3)		// W	Transmit Page Start Reg offset (A15-A8)#define kNICTransmitByteCount0RegOffset		(0x05 ^ 3)		// W	Transmit Byte Count 0 Reg offset (L7-L0)#define kNICTransmitByteCount1RegOffset		(0x06 ^ 3)		// W	Transmit Byte Count 1 Reg offset (L15-L8)//#define kNICInterruptStatusRegOffset		(0x07 ^ 3)		// R/W	Interrupt Status Reg offset#define kNICRemoteStartAddr0RegOffset		(0x08 ^ 3)		// W	Remote Start Addr 0 Reg offset (A7-A0)#define kNICRemoteStartAddr1RegOffset		(0x09 ^ 3)		// W	Remote Start Addr 1 Reg offset (A15-A8)#define kNICRemoteByteCount0RegOffset		(0x0A ^ 3)		// W	Remote Byte Count 0 Reg offset (BC7-BC0)#define kNICRemoteByteCount1RegOffset		(0x0B ^ 3)		// W	Remote Byte Count 1 Reg offset (BC15-BC8)#define kNICReceiveConfigRegOffset			(0x0C ^ 3)		// W	Receive Configuration Reg offset#define 	kNICReceiveConfigSaveErrPackets	0x01			//			Save Errored Packet#define 	kNICReceiveConfigRuntPacketOK	0x02			//			Accept Runt Packet (less than 64 bytes)#define 	kNICReceiveConfigBroadcastOK	0x04			//			Accept Broadcast#define 	kNICReceiveConfigMulticastOK	0x08			//			Accept Multicast#define 	kNICReceiveConfigAllPhysicalOK	0x10			//			Accept All Packets with a physical addr#define 	kNICReceiveConfigMonitor		0x20			//			Enter Monitor mode#define 	kNICReceiveConfigReserved		0xC0			//			Reserved#define kNICTransmitConfigRegOffset			(0x0D ^ 3)		// W	Transmit Configuration Reg offset#define 	kNICTransConfigInhibitCRC		0x01			//		Inhibitited CRC (0: append CRC)#define 	kNICTransConfigLoopbackMask		0x06			//		Loopback Control Mask bits#define 	kNICTransConfigLoopbackNormal	0x00			//			Normal#define 	kNICTransConfigLoopbackNIC		0x02			//			Internal NIC Loopback#define 	kNICTransConfigLoopbackENDEC	0x04			//			Internal ENDEC Loopback#define 	kNICTransConfigLoopbackExternal 0x06			//			External Loopback#define 	kNICTransConfigAutoTransmitOff	0x08			//		Auto Transmit Disable (by multicast packet from other station)#define 	kNICTransConfigCollisonOffsetEn	0x10			//		Collision Offset Enable (longer backoff delay for low priority)#define 	kNICTransConfigReserved			0xE0			//		Reserved#define kNICDataConfigRegOffset				(0x0E ^ 3)		// W	Data Configuration Reg offset#define 	kNICDataConfigWordTransfer		0x01			//		Word Transfer#define 	kNICDataConfigByteTransfer		0x00			//		Byte Transfer#define 	kNICDataConfigByteOrderBig		0x02			//		Byte Order for Word Transfer (1: big endian)#define 	kNICDataConfigByteOrderLittle	0x00			//									 (0: little endian)#define 	kNICDataConfigLongAddr			0x04			//		32-bit Long Addr form Remote and Local DMA#define 	kNICDataConfigLoopbackDisable	0x08			//		Loopback disable (select by Transmit Configuration Reg)#define 	kNICDataConfigAutoInitRemote	0x10			//		Auto-initialize Remote (for Send Packet Command)#define 	kNICDataConfigFIFOThresholdMask 0x60			//		FIFO Threshold Mask bits#define 	kNICDataConfigFIFOThreshold2B	0x00			//			1 word / 2 bytes#define 	kNICDataConfigFIFOThreshold4B	0x20			//			2 word / 4 bytes#define 	kNICDataConfigFIFOThreshold8B	0x40			//			4 word / 8 bytes#define 	kNICDataConfigFIFOThreshold12B	0x60			//			6 word / 12 bytes#define kNICInterruptMaskRegOffset			(0x0F ^ 3)		// W	Interrupt Mask Reg offset (bits are same as in kInterruptStatusReg)// Page 1 registers (Read/Write)//#define kNICCommandRegOffset				(0x00 ^ 3)		// R/W	Command Reg offset#define kNICPhysicalAddr0RegOffset			(0x01 ^ 3)		// R/W	Physical Addr 0 Reg offset (DA07-DA00)#define kNICPhysicalAddr1RegOffset			(0x02 ^ 3)		// R/W	Physical Addr 1 Reg offset (DA15-DA08)#define kNICPhysicalAddr2RegOffset			(0x03 ^ 3)		// R/W	Physical Addr 2 Reg offset (DA23-DA16)#define kNICPhysicalAddr3RegOffset			(0x04 ^ 3)		// R/W	Physical Addr 3 Reg offset (DA31-DA24)#define kNICPhysicalAddr4RegOffset			(0x05 ^ 3)		// R/W	Physical Addr 4 Reg offset (DA39-DA32)#define kNICPhysicalAddr5RegOffset			(0x06 ^ 3)		// R/W	Physical Addr 5 Reg offset (DA47-DA40)#define kNICCurrentPageRegOffset			(0x07 ^ 3)		// R/W	Current Page Reg offset (A15-A8)#define kNICMulticastAddr0RegOffset			(0x08 ^ 3)		// R/W	Multicast Addr 0 Reg offset (FB07-FB00)#define kNICMulticastAddr1RegOffset			(0x09 ^ 3)		// R/W	Multicast Addr 1 Reg offset (FB15-FB08)#define kNICMulticastAddr2RegOffset			(0x0A ^ 3)		// R/W	Multicast Addr 2 Reg offset (FB23-FB16)#define kNICMulticastAddr3RegOffset			(0x0B ^ 3)		// R/W	Multicast Addr 3 Reg offset (FB31-FB24)#define kNICMulticastAddr4RegOffset			(0x0C ^ 3)		// R/W	Multicast Addr 4 Reg offset (FB39-FB32)#define kNICMulticastAddr5RegOffset			(0x0D ^ 3)		// R/W	Multicast Addr 5 Reg offset (FB47-FB40)#define kNICMulticastAddr6RegOffset			(0x0E ^ 3)		// R/W	Multicast Addr 6 Reg offset (FB55-FB48)#define kNICMulticastAddr7RegOffset			(0x0F ^ 3)		// R/W	Multicast Addr 7 Reg offset (FB63-FB56)// Page 2 registers (Read) For diagnostics only. should not modified during the operation//#define kNICCommandRegOffset				(0x00 ^ 3)		// R/W	Command Reg offset//#define kNICPageStartRegOffset			(0x01 ^ 3)		// R	Page Start Reg offset (A15-A8)//#define kNICPageStopRegOffset				(0x02 ^ 3)		// R	Page Stop Reg offset (A15-A8)#define kNICRemoteNextPacketPtrRegOffset	(0x03 ^ 3)		// R/W	Remote Next Packet Pointer Reg offset//#define kNICTransmitPageStartRegOffset	(0x04 ^ 3)		// R	Trasmit Page Start Reg offset (A15-A8)#define kNICLocalNextPacketPtrRegOffset		(0x05 ^ 3)		// R/W	Local Next Packet Pointer Reg offset#define kNICAddrCounterUpperRegOffset		(0x06 ^ 3)		// R/W	Address Counter Upper Reg offset#define kNICAddrCounterLowerRegOffset		(0x07 ^ 3)		// R/W	Address Counter Lower Reg offset//#define kNICReceiveConfigRegOffset		(0x0C ^ 3)		// R	Receive Configuration Reg offset//#define kNICTransmitConfigRegOffset		(0x0D ^ 3)		// R	Transmit Configuration Reg offset//#define kNICDataConfigRegOffset			(0x0E ^ 3)		// R	Data Configuration Reg offset//#define kNICInterruptMaskRegOffset		(0x0F ^ 3)		// R	Interrupt Mask Reg offset// Page 2 registers (Write) For diagnostics only. should not modified during the operation//#define kNICCommandRegOffset				(0x00 ^ 3)		// R/W	Command Reg offset//#define kNICCurrentLocalDMAAddr0RegOffset	(0x01 ^ 3)		// W	Current Local DMA Addr 0 Reg offset (A7-A0)//#define kNICCurrentLocalDMAAddr1RegOffset	(0x02 ^ 3)		// W	Current Local DMA Addr 1 Reg offset (A15-A8)//#define kNICRemoteNextPacketPtrRegOffset	(0x03 ^ 3)		// R/W	Remote Next Packet Pointer Reg offset//#define kNICLocalNextPacketPtrRegOffset	(0x05 ^ 3)		// R/W	Local Next Packet Pointer Reg offset//#define kNICAddrCounterUpperRegOffset		(0x06 ^ 3)		// R/W	Address Counter Upper Reg offset//#define kNICAddrCounterLowerRegOffset		(0x07 ^ 3)		// R/W	Address Counter Lower Reg offset//	Addititional NE2000 configuration registers (in page 0, read directly; write by a read and a write)#define kNE2KConfigARegOffset				(0x0A ^ 3)		// R/W	Configuration A Reg offset#define 	kNE2KConfigABaseIOAddrMask		0x07			//		NIC Base IO Addr Mask#define		kNE2KConfigABaseIOAddr300H		0x00			//			300H#define		kNE2KConfigABaseIOAddrSW278H	0x01			//			4 write to 278H to write these 3 bits#define		kNE2KConfigABaseIOAddr240H		0x02			//			240H#define		kNE2KConfigABaseIOAddr280H		0x03			//			280H#define		kNE2KConfigABaseIOAddr2C0H		0x04			//			2C0H#define		kNE2KConfigABaseIOAddr320H		0x05			//			320H#define		kNE2KConfigABaseIOAddr340H		0x06			//			340H#define		kNE2KConfigABaseIOAddr360H		0x07			//			360H#define 	kNE2KConfigAIntLines			0x38			//		Interrupt Lines Used#define 	kNE2KConfigAFastRdWr			0x40			//		Fast Read/Write (prefetch/queue, slow io may overwrite the previous byte)#define 	kNE2KConfigAReserved			0x80			//		Reserved#define kNE2KConfigBRegOffset				(0x0B ^ 3)		// R/W	Configuration B Reg offset#define 	kNE2KConfigBPhysLayerInterfMask	0x03			//		Physical Layer Interface#define 	kNE2KConfigBPhysLayerAutoDetect	0x00			//			Auto Detect (for some cards)#define 	kNE2KConfigBPhysLayer10BASE_T	0x00			//			10BASE-T Compatible Squelch Level#define 	kNE2KConfigBPhysLayer10BASE2	0x01			//			10BASE2#define 	kNE2KConfigBPhysLayer10BASE5	0x02			//			10BASE5#define 	kNE2KConfigBPhysLayer10BASE_TR	0x03			//			10BASE-T Reduced Squelch Level#define 	kNE2KConfigBGoodLinkDisable		0x04			//		Write: Good Link Pulse Disable (10BASE-T)#define 	kNE2KConfigBGoodLink			0x04			//		Read: Good Link Integrity (10BASE-T) or in AUI mode#define 	kNE2KConfigBIO16ControlOn		0x08			//		IO16# Always Enable#define 	kNE2KConfigBReserved			0x10			//		Reserved#define 	kNE2KConfigBBusError			0x20			//		Bus Error Status (write 1 to clear it)#define 	kNE2KConfigBBootPROMWrite		0x40			//		Boot PROM Write Enable#define 	kNE2KConfigBEEPROMLoad			0x80			//		EEPROM Load Enable////	Data transfer port: offset from 0x10 to 0x17, 16-bit only//#define kNE2KDataPortOffset					0x10			// Data port offset////	Reset port: offset from 0x18 to 0x1F, 8-bit only//#define kNE2KResetPortOffset				(0x1F ^ 3)		// Reset port offset (0x1F for compatible with DP83903 MFC)															// Read/Write: reset active/inactive. reset NIC chip only////	Memory map////		0x0000		Ethernet Id Block//		  ..			....//		0x3FFF		Ethernet Id Block////		0x4000		Buffer (16/8 KB)//		  ..			....//		0x6000		Buffer (16 KB only)//		  ..			....////		0x8000		Alised 0x0000 - 0x7FFF//		  ..			....//		0xFFFF		Alised 0x0000 - 0x7FFF//#define kNE2KEthernetIdBlockOffset			0x0000			// Ethernet Id Block offset#define kNE2KBufferOffset					0x4000			// Buffer offset#define kNE2KBuffer8KEndOffset				0x6000			// 8K buffer end offset#define kNE2KBufferMinSize					(1024 * 8)		// Min buffer size in byte: 8 K#define kNE2KBufferMaxSize					(1024 * 16)		// Max buffer size in byte: 16 K////	Ethernet Id Block//struct TEthernetIdBlk{	UChar	fEthernetAddr[12];								// 00-0B: Ethernet Addr (MSB-LSB) Even byte only	UChar	fReserved[16];									// 0C-1B: Reserved	UChar	fBusWidth[4];									// 1C-1F: 'W'/'B', NIC bus width is 16/8 bit };////	Misc definitions//#define kNICPageSize						256				// NIC page size in byte#define kNICMulticastAddrSize				8				// NIC multicast addr size in bytestruct TNICRxPacketHeader									// Rx packet header (in front of Rx packet){	UChar	fRxStatus;										// Rx status	UChar	fNextPage;										// Next page	UChar	fLengthL;										// Data length low 	UChar	fLengthH;										// Data length high };////	Ethernet packet definitions //#define kPacketAddrSize						6				// Packet physical address size in byte#define kPacketTypeSize						2				// Packet type size in byte#define kPacketCRCSize						4				// Packet CRC size in byte#define kPacketHeaderSize					14				// Packet header size in bytestruct TPacketHeader{	UChar	fDestinationAddr[kPacketAddrSize];				// Destination address	UChar	fSourceAddr[kPacketAddrSize];					// Source address	UChar	fLengthType[kPacketTypeSize];					// Length/type};#define kPacketMaxDataLength				1500			// Max packet data length#define kPacketMinDataLength				46				// Min packet data length#define kPacketTxMaxLength					(kPacketHeaderSize + kPacketMaxDataLength)	// 1514	Max Tx packet length#define kPacketTxMinLength					(kPacketHeaderSize + kPacketMinDataLength)	// 60	Min Tx packet length#define kPacketRxMaxLength					(kPacketTxMaxLength + kPacketCRCSize)		// 1518	Max Rx packet length#define kPacketRxMinLength					(kPacketTxMinLength + kPacketCRCSize)		// 64	Min Rx packet length#endif